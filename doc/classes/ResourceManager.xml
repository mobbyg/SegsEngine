<?xml version="1.0" encoding="UTF-8" ?>
<class name="ResourceManager" inherits="Object" version="4.0">
    <brief_description>
        Singleton used to load/save resource files.
    </brief_description>
    <description>
        Singleton used to manage loading/saving resource files from/to the filesystem.
        It uses the many [ResourceFormatLoader] and [ResourceFormatSaver] classes registered in the engine (either built-in or from a plugin) to load/save files into memory and convert them to a format that can be used by the engine.
        It saves engine-specific resource data to text-based (e.g. [code].tres[/code] or [code].tscn[/code]) or binary files (e.g. [code].res[/code] or [code].scn[/code]).
        GDScript has a simplified [method @GDScript.load] built-in method which can be used in most situations, leaving the use of [ResourceManager] for more advanced scenarios.
    </description>
    <tutorials>
    </tutorials>
    <methods>
        <method name="get_recognized_extensions">
            <return type="PoolStringArray">
            </return>
            <argument index="0" name="type" type="Resource">
            </argument>
            <description>
                Returns the list of extensions available for saving a resource of a given type.
            </description>
        </method>
        <method name="save">
            <return type="int" enum="Error">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <argument index="1" name="resource" type="Resource">
            </argument>
            <argument index="2" name="flags" type="int" enum="ResourceManager.SaverFlags" default="0">
            </argument>
            <description>
                Saves a resource to disk to the given path, using a [ResourceFormatSaver] that recognizes the resource object.
                The [code]flags[/code] bitmask can be specified to customize the save behavior.
                Returns [constant OK] on success.
            </description>
        </method>
        <method name="exists">
            <return type="bool">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <argument index="1" name="type_hint" type="String" default="&quot;&quot;">
            </argument>
            <description>
                Returns whether a recognized resource exists for the given [code]path[/code].
                An optional [code]type_hint[/code] can be used to further specify the [Resource] type that should be handled by the [ResourceFormatLoader].
            </description>
        </method>
        <method name="get_dependencies">
            <return type="PoolStringArray">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <description>
                Returns the dependencies for the resource at the given [code]path[/code].
            </description>
        </method>
        <method name="get_recognized_extensions_for_type">
            <return type="PoolStringArray">
            </return>
            <argument index="0" name="type" type="String">
            </argument>
            <description>
                Returns the list of recognized extensions for a resource type.
            </description>
        </method>
        <method name="has">
            <return type="bool">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <description>
                [i]Deprecated method.[/i] Use [method has_cached] or [method exists] instead.
            </description>
        </method>
        <method name="has_cached">
            <return type="bool">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <description>
                Returns whether a cached resource is available for the given [code]path[/code].
                Once a resource has been loaded by the engine, it is cached in memory for faster access, and future calls to the [method load] or [method load_interactive] methods will use the cached version. The cached resource can be overridden by using [method Resource.take_over_path] on a new resource for that same path.
            </description>
        </method>
        <method name="load">
            <return type="Resource">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <argument index="1" name="type_hint" type="String" default="&quot;&quot;">
            </argument>
            <argument index="2" name="no_cache" type="bool" default="false">
            </argument>
            <description>
                Loads a resource at the given [code]path[/code], caching the result for further access.
                The registered [ResourceFormatLoader]s are queried sequentially to find the first one which can handle the file's extension, and then attempt loading. If loading fails, the remaining ResourceFormatLoaders are also attempted.
                An optional [code]type_hint[/code] can be used to further specify the [Resource] type that should be handled by the [ResourceFormatLoader].
                If [code]no_cache[/code] is [code]true[/code], the resource cache will be bypassed and the resource will be loaded anew. Otherwise, the cached resource will be returned if it exists.
                Returns an empty resource if no ResourceFormatLoader could handle the file.
            </description>
        </method>
        <method name="load_interactive">
            <return type="ResourceInteractiveLoader">
            </return>
            <argument index="0" name="path" type="String">
            </argument>
            <argument index="1" name="type_hint" type="String" default="&quot;&quot;">
            </argument>
            <description>
                Starts loading a resource interactively. The returned [ResourceInteractiveLoader] object allows to load with high granularity, calling its [method ResourceInteractiveLoader.poll] method successively to load chunks.
                An optional [code]type_hint[/code] can be used to further specify the [Resource] type that should be handled by the [ResourceFormatLoader].
            </description>
        </method>
        <method name="set_abort_on_missing_resources">
            <return type="void">
            </return>
            <argument index="0" name="abort" type="bool">
            </argument>
            <description>
                Changes the behavior on missing sub-resources. The default behavior is to abort loading.
            </description>
        </method>
    </methods>
    <constants>
        <constant name="FLAG_RELATIVE_PATHS" value="1" enum="SaverFlags">
            Save the resource with a path relative to the scene which uses it.
        </constant>
        <constant name="FLAG_BUNDLE_RESOURCES" value="2" enum="SaverFlags">
            Bundles external resources.
        </constant>
        <constant name="FLAG_CHANGE_PATH" value="4" enum="SaverFlags">
            Changes the [member Resource.resource_path] of the saved resource to match its new location.
        </constant>
        <constant name="FLAG_OMIT_EDITOR_PROPERTIES" value="8" enum="SaverFlags">
            Do not save editor-specific metadata (identified by their [code]__editor[/code] prefix).
        </constant>
        <constant name="FLAG_SAVE_BIG_ENDIAN" value="16" enum="SaverFlags">
            Save as big endian (see [member File.endian_swap]).
        </constant>
        <constant name="FLAG_COMPRESS" value="32" enum="SaverFlags">
            Compress the resource on save using [constant File.COMPRESSION_ZSTD]. Only available for binary resource types.
        </constant>
        <constant name="FLAG_REPLACE_SUBRESOURCE_PATHS" value="64" enum="SaverFlags">
            Take over the paths of the saved subresources (see [method Resource.take_over_path]).
        </constant>
    </constants>
</class>
